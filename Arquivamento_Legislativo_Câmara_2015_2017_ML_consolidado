{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"dataset_câmara_2015_2017_ML_consolidado","provenance":[],"collapsed_sections":["k2Yse98xgkUy"]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6N1NdX2irhE2"},"source":["##Carregar a biblioteca de dados"]},{"cell_type":"code","metadata":{"id":"ZLXbu5pGrhrb","colab":{"background_save":true}},"source":["import pandas as pd\n","import numpy as np\n","from datetime import datetime\n","import sys\n","import seaborn as sns\n","import re\n","%matplotlib inline\n","from sklearn.linear_model import LogisticRegression"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eaBP7KAKruiR"},"source":["##Análise Exploratória de Dados\n","##2015"]},{"cell_type":"code","metadata":{"id":"ij4taVSPGrwM"},"source":["#Banco de dados (Preposições_2015_Câmara_dos_Deputados)\n","\n","data1_2015 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoes/csv/proposicoes-2015.csv', sep=';')\n","\n","\n","#Seleção dos dados \n","\n","df1_selection_2015 = data1_2015.iloc[:,[0,2,3,4,10,17,23,24]]\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rk3pAzBXPTn2"},"source":["#Banco de dados (Proposições_Temas_2015_Câmara_dos_Deputados)\n","\n","data2_2015 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesTemas/csv/proposicoesTemas-2015.csv', sep=';')\n","\n","#Retirar o id de uma coluna com \"http\"\n","\n","data2_2015['uriProposicao'] = data2_2015['uriProposicao'].str.replace(r'https://dadosabertos.camara.leg.br/api/v2/proposicoes/', '')\n","data2_2015['uriProposicao'] = data2_2015['uriProposicao'].astype(int)\n","\n","#Selecionar os dados necessários\n","\n","df2_selection_2015 = data2_2015.iloc[:,[0,5]]\n","\n","#Contar a quantidade de temas por preposição\n","\n","df2_count_2015 = df2_selection_2015.groupby(['uriProposicao'],as_index=False).agg('count')\n","\n","#Renomear tabela tema e uriProposicao\n","\n","df2rename_2015 = df2_count_2015.rename(columns={'uriProposicao': 'id','tema': 'qtd_temas'}, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S45ogY9SVOCP"},"source":["#Banco de dados (Autores_2015_Câmara_dos_Deputados)\n","\n","data3_2015 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesAutores/csv/proposicoesAutores-2015.csv', sep=';')\n","\n","#Selecionar os dados necessários\n","\n","df3_selection_2015 = data3_2015.iloc[:,[0,6]]\n","\n","#Contar a quantidade de temas por preposição\n","\n","df3_count_2015 = df3_selection_2015.groupby(['idProposicao'],as_index=False).agg('count')\n","\n","#Renomear tabela nomeAutor e idProposicao\n","\n","df3rename_2015 = df3_count_2015.rename(columns={'idProposicao': 'id','nomeAutor': 'qtd_autores'}, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cq-OYsoweE4Z"},"source":["# Fazer o merge de qtd _temas com qtd_autores\n","\n","merge_autores_temas_2015 = df2_count_2015.merge(df3_count_2015, left_on='id', right_on='id', how='inner')\n","\n","#merge_autores_temas_2015.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fcsrGhY_g3Vu"},"source":["# Fazer o merge de merge_autores_temas com a tabela preposicoes\n","\n","merge_principal3_2015 = df1_selection_2015.merge(merge_autores_temas_2015, left_on='id', right_on='id', how=\"left\")\n","merge_principal3_2015['qtd_temas'] = merge_principal3_2015['qtd_temas'].fillna(0).astype(np.int64)\n","merge_principal3_2015['qtd_autores'] = merge_principal3_2015['qtd_autores'].fillna(0).astype(np.int64)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ptaNF58Mhc9d"},"source":["# Calcular o número em dias entre a data de apresentação e a data da última movimentação\n","\n","#Transformar a data de apresentação e data do último status em data\n","\n","merge_principal3_2015['dataApresentacao'] = pd.to_datetime(merge_principal3_2015['dataApresentacao']).dt.date\n","merge_principal3_2015['ultimoStatus_dataHora'] = pd.to_datetime(merge_principal3_2015['ultimoStatus_dataHora']).dt.date\n","\n","#Calcular os dias de tramitação entre as duas datas\n","\n","merge_principal3_2015['TempodeTramitacao'] = merge_principal3_2015['ultimoStatus_dataHora'] - merge_principal3_2015['dataApresentacao']\n","merge_principal3_2015['TempodeTramitacao'] = merge_principal3_2015['TempodeTramitacao'].astype(\"timedelta64[D]\").astype(int)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZgpGv05bsyyq","executionInfo":{"elapsed":64456,"status":"ok","timestamp":1604593440771,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"096e5841-ad9a-43df-f43d-1c2fbd98b566","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Banco de dados (PosicaoAutores_2015_Câmara_dos_Deputados)\n","\n","data4_2015 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/orgaosDeputados/csv/orgaosDeputados-L55.csv', sep=';')\n","\n","#Selecionar os dados necessários\n","\n","df4_selec_2015 = data4_2015.iloc[:,[4,8]]\n","df4_selec_2015['uriDeputado'] = df4_selec_2015['uriDeputado'].str.replace(r'https://dadosabertos.camara.leg.br/api/v2/deputados/', '')\n","df4_selec_2015['uriDeputado'] = df4_selec_2015['uriDeputado'].astype(int)\n","\n","\n","#Pegar somente os cargos de Presidente e Relator\n","\n","df4_selec_2015['cargo'] = (df4_selec_2015['cargo'] == \"Presidente\") | (df4_selec_2015['cargo'] == \"Relator\")\n","\n","#Agrupar por deputados que ocupou cargo\n","\n","dep_cargo_2015 = df4_selec_2015.groupby(['uriDeputado'],as_index=False).agg('max')\n","\n","#Renomear Colunas\n","\n","dep_cargo_2015 = dep_cargo_2015.rename(columns={'uriDeputado': 'idDeputado', 'cargo': 'forca_politica'})"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  if __name__ == '__main__':\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"bS5Mw5jJf_mU","executionInfo":{"elapsed":84604,"status":"ok","timestamp":1604593460978,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"3c7b1b67-39a3-4f30-cab3-ff16cc719d05","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Banco de Dados (Preposicão_Autor) - data5\n","\n","data5_2015 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesAutores/csv/proposicoesAutores-2015.csv', sep=';')\n","\n","df5_selection_2015 = data5_2015.iloc[:,[0,2]]\n","df5select_2015 = df5_selection_2015['idDeputadoAutor'] = df5_selection_2015['idDeputadoAutor'].astype('Int64')\n","df5select_2015 = df5_selection_2015['idDeputadoAutor'] = df5_selection_2015.dropna(subset=['idDeputadoAutor'])\n","\n","#Renomear Colunas\n","\n","df5select_2015 = df5select_2015.rename(columns={'idProposicao': 'id','idDeputadoAutor': 'idDeputado'})"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  import sys\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"QHHBe7QFhml0"},"source":["#Merge colunas \n","\n","merge_forca_2015 = df5select_2015.merge(dep_cargo_2015, left_on='idDeputado', right_on='idDeputado', how=\"left\")\n","\n","#Colocar valor False caso o deputado não tenha particado em nenhum função importante\n","\n","merge_forca_2015[\"forca_politica\"] = merge_forca_2015[\"forca_politica\"].fillna('False')\n","\n","#Retirar o id deputado \n","\n","dadoselec_2015 = merge_forca_2015.iloc[:,[0,2]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z7S7NCzizFVj"},"source":["#Agrupar agrupar por preposição e agregar por \n","\n","dadoselec_forca_2015 = dadoselec_2015.groupby(['id'],as_index=False).agg('max')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4GW-LYwpDljX"},"source":["####Tabela Câmara dos Deputados (2015)\n"]},{"cell_type":"code","metadata":{"id":"qa6jlgW91hTr"},"source":["#Montar a tabela final_2015\n","\n","principal5_2015 = merge_principal3_2015.merge(dadoselec_forca_2015, left_on='id', right_on='id', how=\"left\")\n","principal5_2015 = principal5_2015.iloc[:,[0,1,2,3,4,5,6,8,9,10,11,7]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ayDl-63zj_ny","executionInfo":{"elapsed":118823,"status":"ok","timestamp":1604593495347,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"e3a322cf-a0c5-46bf-c802-6135313bf2bc","colab":{"base_uri":"https://localhost:8080/"}},"source":["principal5_2015.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 39686 entries, 0 to 39685\n","Data columns (total 12 columns):\n"," #   Column                            Non-Null Count  Dtype \n","---  ------                            --------------  ----- \n"," 0   id                                39686 non-null  int64 \n"," 1   siglaTipo                         39686 non-null  object\n"," 2   numero                            39686 non-null  int64 \n"," 3   ano                               39686 non-null  int64 \n"," 4   dataApresentacao                  39686 non-null  object\n"," 5   ultimoStatus_dataHora             39686 non-null  object\n"," 6   ultimoStatus_regime               5560 non-null   object\n"," 7   qtd_temas                         39686 non-null  int64 \n"," 8   qtd_autores                       39686 non-null  int64 \n"," 9   TempodeTramitacao                 39686 non-null  int64 \n"," 10  forca_politica                    33176 non-null  object\n"," 11  ultimoStatus_descricaoTramitacao  39686 non-null  object\n","dtypes: int64(6), object(6)\n","memory usage: 3.9+ MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-beLabK-Ewv4"},"source":["##2016\n"]},{"cell_type":"code","metadata":{"id":"TiYxQNSKE0zp"},"source":["#Banco de dados (Preposições_2016_Câmara_dos_Deputados)\n","\n","data1_2016 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoes/csv/proposicoes-2016.csv', sep=';')\n","\n","\n","#Seleção dos dados \n","\n","df1_selection_2016 = data1_2016.iloc[:,[0,2,3,4,10,17,23,24]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rnYtUHNtV6Em"},"source":["#Banco de dados (Proposições_Temas_2016_Câmara_dos_Deputados)\n","\n","data2_2016 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesTemas/csv/proposicoesTemas-2016.csv', sep=';')\n","\n","#Retirar o id de uma coluna com \"http\"\n","\n","data2_2016['uriProposicao'] = data2_2016['uriProposicao'].str.replace(r'https://dadosabertos.camara.leg.br/api/v2/proposicoes/', '')\n","data2_2016['uriProposicao'] = data2_2016['uriProposicao'].astype(int)\n","\n","\n","#Selecionar os dados necessários\n","\n","df2_selection_2016 = data2_2016.iloc[:,[0,5]]\n","\n","#Contar a quantidade de temas por preposição\n","\n","df2_count_2016 = df2_selection_2016.groupby(['uriProposicao'],as_index=False).agg('count')\n","\n","#Renomear tabela tema e uriProposicao\n","\n","df2rename_2016 = df2_count_2016.rename(columns={'uriProposicao': 'id','tema': 'qtd_temas'}, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xCh3XTwGXLpi"},"source":["#Banco de dados (Autores_2016_Câmara_dos_Deputados)\n","\n","data3_2016 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesAutores/csv/proposicoesAutores-2016.csv', sep=';')\n","\n","#Selecionar os dados necessários\n","\n","df3_selection_2016 = data3_2016.iloc[:,[0,6]]\n","\n","#Contar a quantidade de temas por preposição\n","\n","df3_count_2016 = df3_selection_2016.groupby(['idProposicao'],as_index=False).agg('count')\n","\n","#Renomear tabela nomeAutor e idProposicao\n","\n","df3rename_2016 = df3_count_2016.rename(columns={'idProposicao': 'id','nomeAutor': 'qtd_autores'}, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SE_4qK5PYV01"},"source":["# Fazer o merge de qtd _temas com qtd_autores\n","\n","merge_autores_temas_2016 = df2_count_2016.merge(df3_count_2016, left_on='id', right_on='id', how='inner')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hlo0siksbPjC"},"source":["# Fazer o merge de merge_autores_temas com a tabela preposicoes\n","\n","merge_principal3_2016 = df1_selection_2016.merge(merge_autores_temas_2016, left_on='id', right_on='id', how=\"left\")\n","merge_principal3_2016['qtd_temas'] = merge_principal3_2016['qtd_temas'].fillna(0).astype(np.int64)\n","merge_principal3_2016['qtd_autores'] = merge_principal3_2016['qtd_autores'].fillna(0).astype(np.int64)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sxnIY4wUbjtc"},"source":["# Calcular o número em dias entre a data de apresentação e a data da última movimentação\n","\n","#Transformar a data de apresentação e data do último status em data\n","\n","merge_principal3_2016['dataApresentacao'] = pd.to_datetime(merge_principal3_2016['dataApresentacao']).dt.date\n","merge_principal3_2016['ultimoStatus_dataHora'] = pd.to_datetime(merge_principal3_2016['ultimoStatus_dataHora']).dt.date\n","\n","#Calcular os dias de tramitação entre as duas datas\n","\n","merge_principal3_2016['TempodeTramitacao'] = merge_principal3_2016['ultimoStatus_dataHora'] - merge_principal3_2016['dataApresentacao']\n","merge_principal3_2016['TempodeTramitacao'] = merge_principal3_2016['TempodeTramitacao'].astype(\"timedelta64[D]\").astype(int)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nna8mpCeb5BJ","executionInfo":{"elapsed":174745,"status":"ok","timestamp":1604593551427,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"d3a105e4-1ece-4b6d-c2fc-ac16f7adcb15","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Banco de dados (PosicaoAutores_2016_Câmara_dos_Deputados)\n","\n","data4_2016 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/orgaosDeputados/csv/orgaosDeputados-L55.csv', sep=';')\n","\n","#Selecionar os dados necessários\n","\n","df4_selec_2016 = data4_2016.iloc[:,[4,8]]\n","df4_selec_2016['uriDeputado'] = df4_selec_2016['uriDeputado'].str.replace(r'https://dadosabertos.camara.leg.br/api/v2/deputados/', '')\n","df4_selec_2016['uriDeputado'] = df4_selec_2016['uriDeputado'].astype(int)\n","\n","\n","#Pegar somente os cargos de Presidente e Relator\n","\n","df4_selec_2016['cargo'] = (df4_selec_2016['cargo'] == \"Presidente\") | (df4_selec_2016['cargo'] == \"Relator\")\n","\n","#Agrupar por deputados que ocupou cargo\n","\n","dep_cargo_2016 = df4_selec_2016.groupby(['uriDeputado'],as_index=False).agg('max')\n","\n","#Renomear Colunas\n","\n","dep_cargo_2016 = dep_cargo_2016.rename(columns={'uriDeputado': 'idDeputado', 'cargo': 'forca_politica'})"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  if __name__ == '__main__':\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"OzkMTuZRcOIg","executionInfo":{"elapsed":189834,"status":"ok","timestamp":1604593566575,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"044d22d8-893b-4008-cf9b-601e8e31af0b","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Banco de Dados (Preposicão_Autor) - data5\n","\n","data5_2016 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesAutores/csv/proposicoesAutores-2016.csv', sep=';')\n","\n","df5_selection_2016 = data5_2016.iloc[:,[0,2]]\n","df5select_2016 = df5_selection_2016['idDeputadoAutor'] = df5_selection_2016['idDeputadoAutor'].astype('Int64')\n","df5select_2016 = df5_selection_2016['idDeputadoAutor'] = df5_selection_2016.dropna(subset=['idDeputadoAutor'])\n","\n","#Renomear Colunas\n","\n","df5select_2016 = df5select_2016.rename(columns={'idProposicao': 'id','idDeputadoAutor': 'idDeputado'})"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  import sys\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"dHyV_7STcoOU"},"source":["#Merge colunas \n","\n","merge_forca_2016 = df5select_2016.merge(dep_cargo_2016, left_on='idDeputado', right_on='idDeputado', how=\"left\")\n","\n","#Colocar valor False caso o deputado não tenha particado em nenhum função importante\n","\n","merge_forca_2016[\"forca_politica\"] = merge_forca_2016[\"forca_politica\"].fillna('False')\n","\n","#Retirar o id deputado \n","\n","dadoselec_2016 = merge_forca_2016.iloc[:,[0,2]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2WgMZOe6c0-1"},"source":["#Agrupar agrupar por preposição e agregar por \n","\n","dadoselec_forca_2016 = dadoselec_2016.groupby(['id'],as_index=False).agg('max')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uUGVdkH6dKss"},"source":["####Tabela Câmara dos Deputados (2016)"]},{"cell_type":"code","metadata":{"id":"93mO6eG0c9GV"},"source":["#Montar a tabela final_2016\n","\n","principal5_2016 = merge_principal3_2016.merge(dadoselec_forca_2016, left_on='id', right_on='id', how=\"left\")\n","principal5_2016 = principal5_2016.iloc[:,[0,1,2,3,4,5,6,8,9,10,11,7]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7NOUMGECdbb9","executionInfo":{"elapsed":210646,"status":"ok","timestamp":1604593587505,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"dd8e6ec6-03ba-410a-9b8b-01bb4b95d98c","colab":{"base_uri":"https://localhost:8080/"}},"source":["principal5_2016.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 24991 entries, 0 to 24990\n","Data columns (total 12 columns):\n"," #   Column                            Non-Null Count  Dtype \n","---  ------                            --------------  ----- \n"," 0   id                                24991 non-null  int64 \n"," 1   siglaTipo                         24991 non-null  object\n"," 2   numero                            24991 non-null  int64 \n"," 3   ano                               24991 non-null  int64 \n"," 4   dataApresentacao                  24991 non-null  object\n"," 5   ultimoStatus_dataHora             24991 non-null  object\n"," 6   ultimoStatus_regime               3781 non-null   object\n"," 7   qtd_temas                         24991 non-null  int64 \n"," 8   qtd_autores                       24991 non-null  int64 \n"," 9   TempodeTramitacao                 24991 non-null  int64 \n"," 10  forca_politica                    20647 non-null  object\n"," 11  ultimoStatus_descricaoTramitacao  24991 non-null  object\n","dtypes: int64(6), object(6)\n","memory usage: 2.5+ MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9VK2fCrpdkUx"},"source":["##2017"]},{"cell_type":"code","metadata":{"id":"DR3WnsdndnTw"},"source":["#Banco de dados (Preposições_2017_Câmara_dos_Deputados)\n","\n","data1_2017 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoes/csv/proposicoes-2017.csv', sep=';')\n","\n","\n","#Seleção dos dados \n","\n","df1_selection_2017 = data1_2017.iloc[:,[0,2,3,4,10,17,23,24]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gf4_mSeud6-k"},"source":["#Banco de dados (Proposições_Temas_2017_Câmara_dos_Deputados)\n","\n","data2_2017 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesTemas/csv/proposicoesTemas-2017.csv', sep=';')\n","\n","#Retirar o id de uma coluna com \"http\"\n","\n","data2_2017['uriProposicao'] = data2_2017['uriProposicao'].str.replace(r'https://dadosabertos.camara.leg.br/api/v2/proposicoes/', '')\n","data2_2017['uriProposicao'] = data2_2017['uriProposicao'].astype(int)\n","\n","\n","#Selecionar os dados necessários\n","\n","df2_selection_2017 = data2_2017.iloc[:,[0,5]]\n","\n","#Contar a quantidade de temas por preposição\n","\n","df2_count_2017 = df2_selection_2017.groupby(['uriProposicao'],as_index=False).agg('count')\n","\n","#Renomear tabela tema e uriProposicao\n","\n","df2rename_2017 = df2_count_2017.rename(columns={'uriProposicao': 'id','tema': 'qtd_temas'}, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I2kpJ9-oePkg"},"source":["#Banco de dados (Autores_2017_Câmara_dos_Deputados)\n","\n","data3_2017 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesAutores/csv/proposicoesAutores-2017.csv', sep=';')\n","\n","#Selecionar os dados necessários\n","\n","df3_selection_2017 = data3_2017.iloc[:,[0,6]]\n","\n","#Contar a quantidade de temas por preposição\n","\n","df3_count_2017 = df3_selection_2017.groupby(['idProposicao'],as_index=False).agg('count')\n","\n","#Renomear tabela nomeAutor e idProposicao\n","\n","df3rename_2017 = df3_count_2017.rename(columns={'idProposicao': 'id','nomeAutor': 'qtd_autores'}, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J1G4N983ehKT"},"source":["# Fazer o merge de qtd _temas com qtd_autores\n","\n","merge_autores_temas_2017 = df2_count_2017.merge(df3_count_2017, left_on='id', right_on='id', how='inner')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SIGmjp1getDU"},"source":["# Fazer o merge de merge_autores_temas com a tabela preposicoes\n","\n","merge_principal3_2017 = df1_selection_2017.merge(merge_autores_temas_2017, left_on='id', right_on='id', how=\"left\")\n","merge_principal3_2017['qtd_temas'] = merge_principal3_2017['qtd_temas'].fillna(0).astype(np.int64)\n","merge_principal3_2017['qtd_autores'] = merge_principal3_2017['qtd_autores'].fillna(0).astype(np.int64)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zr5rtuPMe8tb"},"source":["# Calcular o número em dias entre a data de apresentação e a data da última movimentação\n","\n","#Transformar a data de apresentação e data do último status em data\n","\n","merge_principal3_2017['dataApresentacao'] = pd.to_datetime(merge_principal3_2017['dataApresentacao']).dt.date\n","merge_principal3_2017['ultimoStatus_dataHora'] = pd.to_datetime(merge_principal3_2017['ultimoStatus_dataHora']).dt.date\n","\n","#Calcular os dias de tramitação entre as duas datas\n","\n","merge_principal3_2017['TempodeTramitacao'] = merge_principal3_2017['ultimoStatus_dataHora'] - merge_principal3_2017['dataApresentacao']\n","merge_principal3_2017['TempodeTramitacao'] = merge_principal3_2017['TempodeTramitacao'].astype(\"timedelta64[D]\").astype(int)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TQBHeJVtfOTu","executionInfo":{"elapsed":264090,"status":"ok","timestamp":1604593641107,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"58c11014-3518-41ac-f0d8-1154879ffcfe","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Banco de dados (PosicaoAutores_2017_Câmara_dos_Deputados)\n","\n","data4_2017 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/orgaosDeputados/csv/orgaosDeputados-L55.csv', sep=';')\n","\n","#Selecionar os dados necessários\n","\n","df4_selec_2017 = data4_2017.iloc[:,[4,8]]\n","df4_selec_2017['uriDeputado'] = df4_selec_2017['uriDeputado'].str.replace(r'https://dadosabertos.camara.leg.br/api/v2/deputados/', '')\n","df4_selec_2017['uriDeputado'] = df4_selec_2017['uriDeputado'].astype(int)\n","\n","\n","#Pegar somente os cargos de Presidente e Relator\n","\n","df4_selec_2017['cargo'] = (df4_selec_2017['cargo'] == \"Presidente\") | (df4_selec_2017['cargo'] == \"Relator\")\n","\n","#Agrupar por deputados que ocupou cargo\n","\n","dep_cargo_2017 = df4_selec_2017.groupby(['uriDeputado'],as_index=False).agg('max')\n","\n","#Renomear Colunas\n","\n","dep_cargo_2017 = dep_cargo_2017.rename(columns={'uriDeputado': 'idDeputado', 'cargo': 'forca_politica'})"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  if __name__ == '__main__':\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"FxFaET-JfhhQ","executionInfo":{"elapsed":279839,"status":"ok","timestamp":1604593656912,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"fa57ca63-5bc0-44bb-cee3-ff6060162d25","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Banco de Dados (Preposicão_Autor) - data5\n","\n","data5_2017 = pd.read_csv('https://dadosabertos.camara.leg.br/arquivos/proposicoesAutores/csv/proposicoesAutores-2017.csv', sep=';')\n","\n","df5_selection_2017 = data5_2017.iloc[:,[0,2]]\n","df5select_2017 = df5_selection_2017['idDeputadoAutor'] = df5_selection_2017['idDeputadoAutor'].astype('Int64')\n","df5select_2017 = df5_selection_2017['idDeputadoAutor'] = df5_selection_2017.dropna(subset=['idDeputadoAutor'])\n","\n","#Renomear Colunas\n","\n","df5select_2017 = df5select_2017.rename(columns={'idProposicao': 'id','idDeputadoAutor': 'idDeputado'})"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  import sys\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"ujP_wbK0gK4i"},"source":["#Merge colunas \n","\n","merge_forca_2017 = df5select_2017.merge(dep_cargo_2017, left_on='idDeputado', right_on='idDeputado', how=\"left\")\n","\n","#Colocar valor False caso o deputado não tenha particado em nenhum função importante\n","\n","merge_forca_2017[\"forca_politica\"] = merge_forca_2017[\"forca_politica\"].fillna('False')\n","\n","#Retirar o id deputado \n","\n","dadoselec_2017 = merge_forca_2017.iloc[:,[0,2]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zuGzYQ1NgY1w"},"source":["#Agrupar agrupar por preposição e agregar por \n","\n","dadoselec_forca_2017 = dadoselec_2017.groupby(['id'],as_index=False).agg('max')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k2Yse98xgkUy"},"source":["####Tabela Câmara dos Deputados (2017)"]},{"cell_type":"code","metadata":{"id":"RNwIFxcWgpW0"},"source":["#Montar a tabela final_2017\n","\n","principal5_2017 = merge_principal3_2017.merge(dadoselec_forca_2017, left_on='id', right_on='id', how=\"left\")\n","principal5_2017 = principal5_2017.iloc[:,[0,1,2,3,4,5,6,8,9,10,11,7]]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sSptrn7MhEX8"},"source":["##Tabela Câmara dos Deputados (2015-2017)"]},{"cell_type":"code","metadata":{"id":"8kzkdhZjhJrs"},"source":["#merge tabela 2015 com 2016\n","\n","df_2015_2016_c = pd.concat([principal5_2015, principal5_2016])\n","\n","#merge tabela 2015 com 2017\n","\n","df_2015_2017_c = pd.concat([df_2015_2016_c, principal5_2017])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4_Fcxxa_pVEp"},"source":["#Filtrar por PL\n","\n","somente_pl = df_2015_2017_c[(df_2015_2017_c['siglaTipo'] == \"PL\")]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JrEAYbzGrNNz","executionInfo":{"elapsed":306992,"status":"ok","timestamp":1604593684279,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"ab4a633c-9deb-4a13-accf-d9f13583f4e1","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["#Filtrar por somente Arquivado\n","\n","somente_arq= somente_pl[(somente_pl['ultimoStatus_descricaoTramitacao'] == \"Arquivamento\")]\n","somente_arq.head(20)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>siglaTipo</th>\n","      <th>numero</th>\n","      <th>ano</th>\n","      <th>dataApresentacao</th>\n","      <th>ultimoStatus_dataHora</th>\n","      <th>ultimoStatus_regime</th>\n","      <th>qtd_temas</th>\n","      <th>qtd_autores</th>\n","      <th>TempodeTramitacao</th>\n","      <th>forca_politica</th>\n","      <th>ultimoStatus_descricaoTramitacao</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>7</th>\n","      <td>865959</td>\n","      <td>PL</td>\n","      <td>8328</td>\n","      <td>2015</td>\n","      <td>2015-01-09</td>\n","      <td>2015-03-05</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>55</td>\n","      <td>NaN</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>74</th>\n","      <td>944269</td>\n","      <td>PL</td>\n","      <td>17</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2019-10-02</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1703</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>944285</td>\n","      <td>PL</td>\n","      <td>28</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2015-05-11</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>98</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>90</th>\n","      <td>944286</td>\n","      <td>PL</td>\n","      <td>29</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2020-05-19</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1933</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>115</th>\n","      <td>944312</td>\n","      <td>PL</td>\n","      <td>46</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2018-05-17</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1200</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>116</th>\n","      <td>944313</td>\n","      <td>PL</td>\n","      <td>47</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2015-02-25</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>154</th>\n","      <td>944351</td>\n","      <td>PL</td>\n","      <td>67</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2015-06-10</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>128</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>158</th>\n","      <td>944355</td>\n","      <td>PL</td>\n","      <td>71</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2015-06-10</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>128</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>160</th>\n","      <td>944734</td>\n","      <td>PL</td>\n","      <td>72</td>\n","      <td>2015</td>\n","      <td>2015-02-02</td>\n","      <td>2015-11-06</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>277</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>310</th>\n","      <td>945555</td>\n","      <td>PL</td>\n","      <td>131</td>\n","      <td>2015</td>\n","      <td>2015-02-03</td>\n","      <td>2015-05-11</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>97</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>317</th>\n","      <td>945562</td>\n","      <td>PL</td>\n","      <td>137</td>\n","      <td>2015</td>\n","      <td>2015-02-03</td>\n","      <td>2015-12-11</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>311</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>341</th>\n","      <td>945598</td>\n","      <td>PL</td>\n","      <td>140</td>\n","      <td>2015</td>\n","      <td>2015-02-03</td>\n","      <td>2020-08-26</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2031</td>\n","      <td>False</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>344</th>\n","      <td>945601</td>\n","      <td>PL</td>\n","      <td>141</td>\n","      <td>2015</td>\n","      <td>2015-02-03</td>\n","      <td>2015-03-26</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>51</td>\n","      <td>False</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>346</th>\n","      <td>945603</td>\n","      <td>PL</td>\n","      <td>143</td>\n","      <td>2015</td>\n","      <td>2015-02-03</td>\n","      <td>2017-11-09</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1010</td>\n","      <td>False</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>406</th>\n","      <td>945699</td>\n","      <td>PL</td>\n","      <td>165</td>\n","      <td>2015</td>\n","      <td>2015-02-03</td>\n","      <td>2019-06-04</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1582</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>514</th>\n","      <td>945872</td>\n","      <td>PL</td>\n","      <td>180</td>\n","      <td>2015</td>\n","      <td>2015-02-04</td>\n","      <td>2018-02-07</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1099</td>\n","      <td>False</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>522</th>\n","      <td>945880</td>\n","      <td>PL</td>\n","      <td>185</td>\n","      <td>2015</td>\n","      <td>2015-02-04</td>\n","      <td>2020-02-05</td>\n","      <td>Prioridade (Art. 151, II, RICD)</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1827</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>523</th>\n","      <td>945881</td>\n","      <td>PL</td>\n","      <td>186</td>\n","      <td>2015</td>\n","      <td>2015-02-04</td>\n","      <td>2015-05-11</td>\n","      <td>Ordinária (Art. 151, III, RICD)</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>96</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>558</th>\n","      <td>945936</td>\n","      <td>PL</td>\n","      <td>194</td>\n","      <td>2015</td>\n","      <td>2015-02-04</td>\n","      <td>2015-03-26</td>\n","      <td>Urgência (Art. 155, RICD)</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>50</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","    <tr>\n","      <th>559</th>\n","      <td>945937</td>\n","      <td>PL</td>\n","      <td>195</td>\n","      <td>2015</td>\n","      <td>2015-02-04</td>\n","      <td>2016-07-15</td>\n","      <td>Prioridade (Art. 151, II, RICD)</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>527</td>\n","      <td>True</td>\n","      <td>Arquivamento</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         id siglaTipo  ...  forca_politica  ultimoStatus_descricaoTramitacao\n","7    865959        PL  ...             NaN                      Arquivamento\n","74   944269        PL  ...            True                      Arquivamento\n","89   944285        PL  ...            True                      Arquivamento\n","90   944286        PL  ...            True                      Arquivamento\n","115  944312        PL  ...            True                      Arquivamento\n","116  944313        PL  ...            True                      Arquivamento\n","154  944351        PL  ...            True                      Arquivamento\n","158  944355        PL  ...            True                      Arquivamento\n","160  944734        PL  ...            True                      Arquivamento\n","310  945555        PL  ...            True                      Arquivamento\n","317  945562        PL  ...            True                      Arquivamento\n","341  945598        PL  ...           False                      Arquivamento\n","344  945601        PL  ...           False                      Arquivamento\n","346  945603        PL  ...           False                      Arquivamento\n","406  945699        PL  ...            True                      Arquivamento\n","514  945872        PL  ...           False                      Arquivamento\n","522  945880        PL  ...            True                      Arquivamento\n","523  945881        PL  ...            True                      Arquivamento\n","558  945936        PL  ...            True                      Arquivamento\n","559  945937        PL  ...            True                      Arquivamento\n","\n","[20 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"T77pQzJ0sstA","executionInfo":{"elapsed":306917,"status":"ok","timestamp":1604593684302,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"6fb4f1f0-8a74-46b9-d4fe-940dc12683ba","colab":{"base_uri":"https://localhost:8080/"}},"source":["somente_arq.count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                                  946\n","siglaTipo                           946\n","numero                              946\n","ano                                 946\n","dataApresentacao                    946\n","ultimoStatus_dataHora               946\n","ultimoStatus_regime                 927\n","qtd_temas                           946\n","qtd_autores                         946\n","TempodeTramitacao                   946\n","forca_politica                      927\n","ultimoStatus_descricaoTramitacao    946\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"chgwwGcPyY7w","executionInfo":{"elapsed":306846,"status":"ok","timestamp":1604593684313,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"a77cb73b-3870-40ee-9b00-7a88595e07ff","colab":{"base_uri":"https://localhost:8080/"}},"source":["somente_pl.count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                                  9458\n","siglaTipo                           9458\n","numero                              9458\n","ano                                 9458\n","dataApresentacao                    9458\n","ultimoStatus_dataHora               9458\n","ultimoStatus_regime                 9154\n","qtd_temas                           9458\n","qtd_autores                         9458\n","TempodeTramitacao                   9458\n","forca_politica                      8913\n","ultimoStatus_descricaoTramitacao    9458\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"bcWlYWMJw6RF"},"source":["\n","## Preparação dos Dados"]},{"cell_type":"code","metadata":{"id":"9XRH9nrIxEW-"},"source":["#Filtrar colunas e remover valores nulos\n","\n","df_organizado = somente_pl[somente_pl['ultimoStatus_regime'].notna()]\n","df_organizado = df_organizado[df_organizado['forca_politica'].notna()]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NgJwPlNBG0ln","executionInfo":{"elapsed":306809,"status":"ok","timestamp":1604593684383,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"c1d872cc-1463-49d7-8f4d-f442bda6eddb","colab":{"base_uri":"https://localhost:8080/"}},"source":["df_organizado.isna().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["id                                  0\n","siglaTipo                           0\n","numero                              0\n","ano                                 0\n","dataApresentacao                    0\n","ultimoStatus_dataHora               0\n","ultimoStatus_regime                 0\n","qtd_temas                           0\n","qtd_autores                         0\n","TempodeTramitacao                   0\n","forca_politica                      0\n","ultimoStatus_descricaoTramitacao    0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"SUyQCC1b_bcb","executionInfo":{"elapsed":306755,"status":"ok","timestamp":1604593684398,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"de176dfc-b16c-4a23-9304-5e778e964b4e","colab":{"base_uri":"https://localhost:8080/"}},"source":["df_organizado.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 8610 entries, 52 to 32475\n","Data columns (total 12 columns):\n"," #   Column                            Non-Null Count  Dtype \n","---  ------                            --------------  ----- \n"," 0   id                                8610 non-null   int64 \n"," 1   siglaTipo                         8610 non-null   object\n"," 2   numero                            8610 non-null   int64 \n"," 3   ano                               8610 non-null   int64 \n"," 4   dataApresentacao                  8610 non-null   object\n"," 5   ultimoStatus_dataHora             8610 non-null   object\n"," 6   ultimoStatus_regime               8610 non-null   object\n"," 7   qtd_temas                         8610 non-null   int64 \n"," 8   qtd_autores                       8610 non-null   int64 \n"," 9   TempodeTramitacao                 8610 non-null   int64 \n"," 10  forca_politica                    8610 non-null   object\n"," 11  ultimoStatus_descricaoTramitacao  8610 non-null   object\n","dtypes: int64(6), object(6)\n","memory usage: 874.5+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uoXQ0MM__gSo"},"source":["#Eliminar na coluna qtd_autores quando tiver sem autor\n","\n","df_remove = df_organizado.loc[(df_organizado['qtd_autores'] == 0)]\n","df_organizado_pre13 = df_organizado.drop(df_remove.index)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vvOXnm3-_pI-","executionInfo":{"elapsed":306693,"status":"ok","timestamp":1604593684412,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"d0eb087c-7acc-46c4-89d3-618af4b102a9","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Verificar se há valores sem autores\n","\n","df_organizado_pre13['qtd_autores'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1     8286\n","2      236\n","3       24\n","5       10\n","8        9\n","7        7\n","14       6\n","18       4\n","11       4\n","4        4\n","6        4\n","12       3\n","9        3\n","25       2\n","19       1\n","15       1\n","34       1\n","13       1\n","24       1\n","23       1\n","Name: qtd_autores, dtype: int64"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"6p1_NwLc_u-X","executionInfo":{"elapsed":306631,"status":"ok","timestamp":1604593684419,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"92b2ad72-52e2-4001-83c2-28fea7d75379","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Verificar se há PL sem tema\n","\n","df_organizado_pre13['qtd_temas'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    5135\n","2    3178\n","3     287\n","4       8\n","Name: qtd_temas, dtype: int64"]},"metadata":{"tags":[]},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"FqOoExgo_zMq","executionInfo":{"elapsed":306553,"status":"ok","timestamp":1604593684423,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"e10c6b52-b1a4-4d43-cfce-19213d5e79e5","colab":{"base_uri":"https://localhost:8080/"}},"source":["df_organizado_pre13['ultimoStatus_regime'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Ordinária (Art. 151, III, RICD)    5742\n","Prioridade (Art. 151, II, RICD)    2007\n","Urgência (Art. 155, RICD)           666\n","Especial                            148\n","Urgência (Art. 154, RICD)            43\n","Especial (Art. 213, § 6º, RICD)       2\n","Name: ultimoStatus_regime, dtype: int64"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"code","metadata":{"id":"zhaEvlI8_2Bm","executionInfo":{"elapsed":306478,"status":"ok","timestamp":1604593684427,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"de614f7a-32f9-406b-cc58-c393b53a0729","colab":{"base_uri":"https://localhost:8080/"}},"source":["df_organizado_pre13.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 8608 entries, 52 to 32475\n","Data columns (total 12 columns):\n"," #   Column                            Non-Null Count  Dtype \n","---  ------                            --------------  ----- \n"," 0   id                                8608 non-null   int64 \n"," 1   siglaTipo                         8608 non-null   object\n"," 2   numero                            8608 non-null   int64 \n"," 3   ano                               8608 non-null   int64 \n"," 4   dataApresentacao                  8608 non-null   object\n"," 5   ultimoStatus_dataHora             8608 non-null   object\n"," 6   ultimoStatus_regime               8608 non-null   object\n"," 7   qtd_temas                         8608 non-null   int64 \n"," 8   qtd_autores                       8608 non-null   int64 \n"," 9   TempodeTramitacao                 8608 non-null   int64 \n"," 10  forca_politica                    8608 non-null   object\n"," 11  ultimoStatus_descricaoTramitacao  8608 non-null   object\n","dtypes: int64(6), object(6)\n","memory usage: 874.2+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uwnJgHW9_6js","executionInfo":{"elapsed":306427,"status":"ok","timestamp":1604593684430,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"07999eae-3016-4fe4-ee5f-a8f774e30c2e","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Nomear a coluna como arquivamento e colocar um valor boleano\n","\n","df_organizado_pre13['Arquivamento'] = df_organizado_pre13['ultimoStatus_descricaoTramitacao'].apply(lambda x: True if (x == 'Arquivamento') else False)\n","df_organizado_pre14 = df_organizado_pre13.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,12]]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"czFczW13AHRs","executionInfo":{"elapsed":306388,"status":"ok","timestamp":1604593684452,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"435478f6-0000-4ec3-f506-1023a724b76d","colab":{"base_uri":"https://localhost:8080/"}},"source":["df_organizado_pre14['Arquivamento'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False    7700\n","True      908\n","Name: Arquivamento, dtype: int64"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"-RnMXVW2AKZX"},"source":["df_organizado9 = df_organizado_pre14"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tG1CZUeFAUV0","executionInfo":{"elapsed":306325,"status":"ok","timestamp":1604593684473,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"b2580bc1-276d-4be9-d422-d9a5f8e8e22e","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Mudar o tipo das colunas\n","\n","df_organizado9['ultimoStatus_regime'] = df_organizado9['ultimoStatus_regime'].astype('category')\n","df_organizado9['forca_politica'] = df_organizado9['forca_politica'].astype('str')\n","df_organizado9['Arquivamento'] = df_organizado9['Arquivamento'].astype('str')\n","\n","df_organizado9.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 8608 entries, 52 to 32475\n","Data columns (total 12 columns):\n"," #   Column                 Non-Null Count  Dtype   \n","---  ------                 --------------  -----   \n"," 0   id                     8608 non-null   int64   \n"," 1   siglaTipo              8608 non-null   object  \n"," 2   numero                 8608 non-null   int64   \n"," 3   ano                    8608 non-null   int64   \n"," 4   dataApresentacao       8608 non-null   object  \n"," 5   ultimoStatus_dataHora  8608 non-null   object  \n"," 6   ultimoStatus_regime    8608 non-null   category\n"," 7   qtd_temas              8608 non-null   int64   \n"," 8   qtd_autores            8608 non-null   int64   \n"," 9   TempodeTramitacao      8608 non-null   int64   \n"," 10  forca_politica         8608 non-null   object  \n"," 11  Arquivamento           8608 non-null   object  \n","dtypes: category(1), int64(6), object(5)\n","memory usage: 815.6+ KB\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  This is separate from the ipykernel package so we can avoid doing imports until\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"DCyoMKzbAb2W","executionInfo":{"elapsed":306243,"status":"ok","timestamp":1604593684477,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"1cad0bf0-65ac-48b5-e76a-d116eb0e95d5","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Colocar numerais na coluna\n","\n","from sklearn.preprocessing import LabelEncoder\n","\n","labelencoder = LabelEncoder()\n","df_organizado9['ultimoStatus_regime'] = labelencoder.fit_transform(df_organizado9['ultimoStatus_regime'])\n","df_organizado9['forca_politica'] = labelencoder.fit_transform(df_organizado9['forca_politica'])\n","df_organizado9['Arquivamento'] = labelencoder.fit_transform(df_organizado9['Arquivamento'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  import sys\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:8: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"pb0X-2LUAodn"},"source":["#Ajustar as colunas do Regime\n","\n","from sklearn.preprocessing import OneHotEncoder\n","\n","enc = OneHotEncoder(handle_unknown='ignore')\n","\n","dum_df = pd.get_dummies(df_organizado9, columns=[\"ultimoStatus_regime\"], prefix=[\"Regime:\"] )\n","\n","# dum_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PTs34g7iAydd"},"source":["#Renomear as colunas\n","\n","dum_df2 = dum_df.rename(columns={'Regime:_0': 'Reg_Especial'})\n","dum_df3 = dum_df2.rename(columns={'Regime:_3': 'Reg_Prioridade (Art. 151, II, RICD)'})\n","dum_df4 = dum_df3.rename(columns={'Regime:_2': 'Reg_Ordinária (Art. 151, III, RICD)'})\n","dum_df5 = dum_df4.rename(columns={'Regime:_5': 'Urgência (Art. 155, RICD)'})\n","dum_df6 = dum_df5.rename(columns={'Regime:_1': 'Especial (Art. 213, § 6º, RICD)'})\n","dum_df7 = dum_df6.rename(columns={'Regime:_4': 'Urgência (Art. 154, RICD)'})"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gm-iRf5MBWLk"},"source":["###Tabela final do pré-processamento"]},{"cell_type":"code","metadata":{"id":"DkjqzdlUA4_e"},"source":["#Selecionar valores colunas pré-processamento\n","\n","df_pre = dum_df7.iloc[:,[0,11,12,13,14,15,16,6,7,8,9,10]]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cu6V0ulPBOLQ","executionInfo":{"elapsed":307955,"status":"ok","timestamp":1604593686295,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"a8463177-117f-4746-a0f2-438b5120e5ee","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Avaliar o balanceamento dos dados\n","\n","df_pre['Arquivamento'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    7700\n","1     908\n","Name: Arquivamento, dtype: int64"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"Cm1y4eIZoo_k"},"source":["#Balanceamento da variável dependente 0\n","\n","df_pre_0 = df_pre[df_pre['Arquivamento'] == 0].sample(n=908, random_state=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ley3w80jothW"},"source":["#Balanceamento da variável dependente 1\n","\n","df_pre_1 = df_pre[df_pre['Arquivamento'] == 1].sample(n=908, random_state=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5sOUXz9ZowPW","executionInfo":{"elapsed":307915,"status":"ok","timestamp":1604593686371,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"08f649a9-ac88-435c-f9ee-e24dc602abf7","colab":{"base_uri":"https://localhost:8080/","height":480}},"source":["#Resultado final com o balanceamento\n","\n","df_pre_balanc = [df_pre_0,df_pre_1]\n","df_pre_balanc_res = pd.concat(df_pre_balanc)\n","print(df_pre_balanc_res.shape)\n","df_pre_balanc_res"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1816, 12)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Reg_Especial</th>\n","      <th>Especial (Art. 213, § 6º, RICD)</th>\n","      <th>Reg_Ordinária (Art. 151, III, RICD)</th>\n","      <th>Reg_Prioridade (Art. 151, II, RICD)</th>\n","      <th>Urgência (Art. 154, RICD)</th>\n","      <th>Urgência (Art. 155, RICD)</th>\n","      <th>qtd_temas</th>\n","      <th>qtd_autores</th>\n","      <th>TempodeTramitacao</th>\n","      <th>forca_politica</th>\n","      <th>Arquivamento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5620</th>\n","      <td>2129736</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>962</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1179</th>\n","      <td>2078063</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1100</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11700</th>\n","      <td>2139932</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>2132504</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>804</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19301</th>\n","      <td>2115286</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>967</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>2126167</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>233</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10753</th>\n","      <td>2138729</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>618</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2508</th>\n","      <td>964559</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1733</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15235</th>\n","      <td>1306957</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1330</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>946617</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1398</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1816 rows × 12 columns</p>\n","</div>"],"text/plain":["            id  Reg_Especial  ...  forca_politica  Arquivamento\n","5620   2129736             0  ...               1             0\n","1179   2078063             0  ...               1             0\n","11700  2139932             0  ...               0             0\n","7130   2132504             1  ...               0             0\n","19301  2115286             0  ...               1             0\n","...        ...           ...  ...             ...           ...\n","2773   2126167             0  ...               1             1\n","10753  2138729             0  ...               0             1\n","2508    964559             0  ...               1             1\n","15235  1306957             0  ...               0             1\n","1075    946617             0  ...               1             1\n","\n","[1816 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"qsd0aVzMpJtG","executionInfo":{"elapsed":307842,"status":"ok","timestamp":1604593686377,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"5cbbf392-5175-4b19-d9a3-27744b2b47b2","colab":{"base_uri":"https://localhost:8080/"}},"source":["df_pre_balanc_res['Arquivamento'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    908\n","0    908\n","Name: Arquivamento, dtype: int64"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"markdown","metadata":{"id":"d4-33Tp6uEtu"},"source":["## Variáveis Independentes"]},{"cell_type":"code","metadata":{"id":"7clCb1dGFLN_","executionInfo":{"elapsed":307765,"status":"ok","timestamp":1604593686389,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"53eca5a2-b45b-4e58-9c21-3cece1e08605","colab":{"base_uri":"https://localhost:8080/","height":445}},"source":["# atribui os valores das variáveis independentes a 'X'\n","X = df_pre_balanc_res.iloc[:,[1,2,3,4,5,6,7,8,9,10]]\n","X = X.rename(columns={'TempodeTramitacao': 'Tramitacao(dias)'})\n","X"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Reg_Especial</th>\n","      <th>Especial (Art. 213, § 6º, RICD)</th>\n","      <th>Reg_Ordinária (Art. 151, III, RICD)</th>\n","      <th>Reg_Prioridade (Art. 151, II, RICD)</th>\n","      <th>Urgência (Art. 154, RICD)</th>\n","      <th>Urgência (Art. 155, RICD)</th>\n","      <th>qtd_temas</th>\n","      <th>qtd_autores</th>\n","      <th>Tramitacao(dias)</th>\n","      <th>forca_politica</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5620</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>962</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1179</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1100</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11700</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>804</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19301</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>967</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>233</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10753</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>618</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2508</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1733</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15235</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1330</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1398</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1816 rows × 10 columns</p>\n","</div>"],"text/plain":["       Reg_Especial  ...  forca_politica\n","5620              0  ...               1\n","1179              0  ...               1\n","11700             0  ...               0\n","7130              1  ...               0\n","19301             0  ...               1\n","...             ...  ...             ...\n","2773              0  ...               1\n","10753             0  ...               0\n","2508              0  ...               1\n","15235             0  ...               0\n","1075              0  ...               1\n","\n","[1816 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"markdown","metadata":{"id":"0IpbrRbPuN0r"},"source":["## Variável Dependente"]},{"cell_type":"code","metadata":{"id":"c8EHeZmcHsaV","executionInfo":{"elapsed":307680,"status":"ok","timestamp":1604593686396,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"c94cfbb2-5821-4b42-cd8d-66d1fcefc7d9","colab":{"base_uri":"https://localhost:8080/","height":411}},"source":["# atribui os valores da variável dependente a 'y'\n","y = df_pre_balanc_res.iloc[:,[11]]\n","y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Arquivamento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5620</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1179</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11700</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19301</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10753</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2508</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15235</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1816 rows × 1 columns</p>\n","</div>"],"text/plain":["       Arquivamento\n","5620              0\n","1179              0\n","11700             0\n","7130              0\n","19301             0\n","...             ...\n","2773              1\n","10753             1\n","2508              1\n","15235             1\n","1075              1\n","\n","[1816 rows x 1 columns]"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"markdown","metadata":{"id":"kmG3bnRxuV8R"},"source":["## Train Test Split"]},{"cell_type":"code","metadata":{"id":"hIO3vRUzIJsC"},"source":["from sklearn.model_selection import train_test_split"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"51gAxLUeIKbm"},"source":["X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=123 )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lwu8szITIKwH","executionInfo":{"elapsed":307621,"status":"ok","timestamp":1604593686421,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"bb74964c-acc2-45f1-e2f0-7e9e59e62858","colab":{"base_uri":"https://localhost:8080/"}},"source":["X_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1362, 10)"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"oxOZjkO6ILBX","executionInfo":{"elapsed":307577,"status":"ok","timestamp":1604593686432,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"e0b65629-3205-469b-e9f7-b3849ddc67f0","colab":{"base_uri":"https://localhost:8080/"}},"source":["X_test.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(454, 10)"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"_3WwhVb4IvZy","executionInfo":{"elapsed":307517,"status":"ok","timestamp":1604593686438,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"0642b359-3547-41c7-a1d1-960c8f267d6d","colab":{"base_uri":"https://localhost:8080/"}},"source":["y_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1362, 1)"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"id":"x2oW3OHMI3vB","executionInfo":{"elapsed":307425,"status":"ok","timestamp":1604593686449,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"b47184fa-ede6-4e02-d9f7-2b7f406859ed","colab":{"base_uri":"https://localhost:8080/"}},"source":["y_test.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(454, 1)"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"markdown","metadata":{"id":"KN1Qtplxo9Xg"},"source":["##Treinar o modelo Regressão Logística"]},{"cell_type":"code","metadata":{"id":"tsioYCfApDok"},"source":["# instanciar modelo de regressão logística\n","reg_log = LogisticRegression(max_iter=1000, solver='lbfgs', multi_class='auto')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0Q6HPHXgE7x4","executionInfo":{"elapsed":307300,"status":"ok","timestamp":1604593686464,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"9c880fd3-83ee-41f7-fce1-73e19397ece0","colab":{"base_uri":"https://localhost:8080/"}},"source":["# treinar modelo\n","reg_log.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"markdown","metadata":{"id":"jhSMdM3CKwbM"},"source":["##Testar o modelo Regressão Logística"]},{"cell_type":"code","metadata":{"id":"YFLRU4reLDxK"},"source":["# fazer predição do Projeto de Lei com os seguintes atributos:\n","#[0, 0, 1, 0, 0, 0, 2, 1, 962, 1]\n","\n","lg_pred = reg_log.predict([[0, 0, 1, 0, 0, 0, 2, 1, 962, 1]])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mRLGtCT3LHA0","executionInfo":{"elapsed":307244,"status":"ok","timestamp":1604593686490,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"fbbc3a02-c45e-416b-841b-8c4b8414769f","colab":{"base_uri":"https://localhost:8080/"}},"source":["# mostrar resultado da predição\n","print('nova predição:\\nclasse = ', lg_pred)\n","print('classe = ', [lg_pred])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["nova predição:\n","classe =  [0]\n","classe =  [array([0])]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"IHLxWjoTK3y6"},"source":["##Avaliar qualidade do modelo Regressão Logística"]},{"cell_type":"markdown","metadata":{"id":"zbSMfXvuNThy"},"source":["###Score"]},{"cell_type":"code","metadata":{"id":"w9I9I99TJcdb","executionInfo":{"elapsed":307196,"status":"ok","timestamp":1604593686500,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"caa66dc2-c69b-4a95-dad4-9e79465b306f","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Avaliação ingênua com todos os dados disponíveis\n","\n","reg_log.score(X_test,y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6651982378854625"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"markdown","metadata":{"id":"w8EVUZ8UNXmX"},"source":["###F1 Score"]},{"cell_type":"code","metadata":{"id":"EFlQ_hjaNdAd","executionInfo":{"elapsed":307140,"status":"ok","timestamp":1604593686510,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"daeb27d1-050c-47dc-81b3-0e1fac120dc3","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Avaliação com todos os dados disponíveis\n","# o F1 Score só faz sentido quando está desbalanceado\n","from sklearn.metrics import f1_score\n","f1_score(y_test, reg_log.predict(X_test), average='weighted')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6651982378854625"]},"metadata":{"tags":[]},"execution_count":76}]},{"cell_type":"markdown","metadata":{"id":"oHPjf8D9wIgD"},"source":["## Matrix de Confusão"]},{"cell_type":"code","metadata":{"id":"5uorDwXWwLOb","executionInfo":{"elapsed":307061,"status":"ok","timestamp":1604593686522,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"7ea7a95b-0798-49d7-c9e6-e0bda322d0f8","colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["from sklearn.metrics import plot_confusion_matrix\n","y_pred = reg_log.predict(X_test)\n","plot_confusion_matrix(reg_log, X_test, y_test)\n","# Na Classe 0 (Não foi arquivado), o modelo acertou a predição para 1500 observações, e errou 82 observações;\n","# Na Classe 1 (Foi arquivado), o modelo acertou a predição para 1500 observações, e errou 70 observações."],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f22fd6669b0>"]},"metadata":{"tags":[]},"execution_count":77},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"tepJqO9f1P4_"},"source":["## Normalização"]},{"cell_type":"markdown","metadata":{"id":"0AZIDTKZ1Pvj"},"source":[""]},{"cell_type":"code","metadata":{"id":"KA2jVKDDwuJt","executionInfo":{"elapsed":306998,"status":"ok","timestamp":1604593686535,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"dd8d0a0c-ddbe-45fe-b4bd-5e1091839c59","colab":{"base_uri":"https://localhost:8080/","height":462}},"source":["df_pre_balanc_res = df_pre_balanc_res.rename(columns={'TempodeTramitacao': 'Tramitacao(dias)'})\n","\n","df_pre_balanc_res"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Reg_Especial</th>\n","      <th>Especial (Art. 213, § 6º, RICD)</th>\n","      <th>Reg_Ordinária (Art. 151, III, RICD)</th>\n","      <th>Reg_Prioridade (Art. 151, II, RICD)</th>\n","      <th>Urgência (Art. 154, RICD)</th>\n","      <th>Urgência (Art. 155, RICD)</th>\n","      <th>qtd_temas</th>\n","      <th>qtd_autores</th>\n","      <th>Tramitacao(dias)</th>\n","      <th>forca_politica</th>\n","      <th>Arquivamento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5620</th>\n","      <td>2129736</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>962</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1179</th>\n","      <td>2078063</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1100</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11700</th>\n","      <td>2139932</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>16</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>2132504</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>804</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19301</th>\n","      <td>2115286</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>967</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>2126167</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>233</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10753</th>\n","      <td>2138729</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>618</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2508</th>\n","      <td>964559</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1733</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15235</th>\n","      <td>1306957</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1330</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>946617</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1398</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1816 rows × 12 columns</p>\n","</div>"],"text/plain":["            id  Reg_Especial  ...  forca_politica  Arquivamento\n","5620   2129736             0  ...               1             0\n","1179   2078063             0  ...               1             0\n","11700  2139932             0  ...               0             0\n","7130   2132504             1  ...               0             0\n","19301  2115286             0  ...               1             0\n","...        ...           ...  ...             ...           ...\n","2773   2126167             0  ...               1             1\n","10753  2138729             0  ...               0             1\n","2508    964559             0  ...               1             1\n","15235  1306957             0  ...               0             1\n","1075    946617             0  ...               1             1\n","\n","[1816 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":78}]},{"cell_type":"code","metadata":{"id":"MQ6ckMqp1BPA"},"source":["# Mudança de escala das variáveis\n","from sklearn.preprocessing import StandardScaler"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eoBZEYIB8zwd","executionInfo":{"elapsed":306942,"status":"ok","timestamp":1604593686563,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"1732d852-a6e2-4a2b-b751-9a7ecdf5ef36","colab":{"base_uri":"https://localhost:8080/","height":445}},"source":["X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Reg_Especial</th>\n","      <th>Especial (Art. 213, § 6º, RICD)</th>\n","      <th>Reg_Ordinária (Art. 151, III, RICD)</th>\n","      <th>Reg_Prioridade (Art. 151, II, RICD)</th>\n","      <th>Urgência (Art. 154, RICD)</th>\n","      <th>Urgência (Art. 155, RICD)</th>\n","      <th>qtd_temas</th>\n","      <th>qtd_autores</th>\n","      <th>Tramitacao(dias)</th>\n","      <th>forca_politica</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>18484</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1304</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25429</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>976</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27497</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1420</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6768</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1501</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14566</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>162</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4490</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1121</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39159</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>341</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7005</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>645</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5366</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1402</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24912</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>700</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1362 rows × 10 columns</p>\n","</div>"],"text/plain":["       Reg_Especial  ...  forca_politica\n","18484             0  ...               0\n","25429             0  ...               1\n","27497             0  ...               0\n","6768              0  ...               1\n","14566             0  ...               1\n","...             ...  ...             ...\n","4490              0  ...               0\n","39159             0  ...               1\n","7005              0  ...               0\n","5366              0  ...               0\n","24912             0  ...               1\n","\n","[1362 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"7sNwFGmo27bW","executionInfo":{"elapsed":306894,"status":"ok","timestamp":1604593686571,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"60eaa4cc-2067-44a4-ccd9-1c892d775302","colab":{"base_uri":"https://localhost:8080/"}},"source":["sc = StandardScaler()\n","sc.fit(X_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["StandardScaler(copy=True, with_mean=True, with_std=True)"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"S1pcIF-I3Efv"},"source":["X_train_std = sc.transform(X_train)\n","X_test_std = sc.transform(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3TxAP-Yg3F1b"},"source":["\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XzURrpq53Ot6","executionInfo":{"elapsed":306839,"status":"ok","timestamp":1604593686607,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"f58cac64-cbc2-4bd2-98df-0e74104b84e7","colab":{"base_uri":"https://localhost:8080/","height":445}},"source":["# Valore originais\n","X_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Reg_Especial</th>\n","      <th>Especial (Art. 213, § 6º, RICD)</th>\n","      <th>Reg_Ordinária (Art. 151, III, RICD)</th>\n","      <th>Reg_Prioridade (Art. 151, II, RICD)</th>\n","      <th>Urgência (Art. 154, RICD)</th>\n","      <th>Urgência (Art. 155, RICD)</th>\n","      <th>qtd_temas</th>\n","      <th>qtd_autores</th>\n","      <th>Tramitacao(dias)</th>\n","      <th>forca_politica</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>18484</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1304</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>25429</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>976</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27497</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1420</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6768</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1501</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>14566</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>162</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4490</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1121</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>39159</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>341</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7005</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>645</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5366</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1402</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>24912</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>700</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1362 rows × 10 columns</p>\n","</div>"],"text/plain":["       Reg_Especial  ...  forca_politica\n","18484             0  ...               0\n","25429             0  ...               1\n","27497             0  ...               0\n","6768              0  ...               1\n","14566             0  ...               1\n","...             ...  ...             ...\n","4490              0  ...               0\n","39159             0  ...               1\n","7005              0  ...               0\n","5366              0  ...               0\n","24912             0  ...               1\n","\n","[1362 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":84}]},{"cell_type":"code","metadata":{"id":"d2lr-_5E3QJp","executionInfo":{"elapsed":306786,"status":"ok","timestamp":1604593686612,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"91dfa391-be4a-404d-fe7b-b25635c7bf86","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Valores normalizados\n","X_train_std"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.09816704,  0.        ,  0.70593897, ..., -0.09824974,\n","         0.85600239, -1.16815381],\n","       [-0.09816704,  0.        ,  0.70593897, ..., -0.09824974,\n","         0.15930566,  0.85605165],\n","       [-0.09816704,  0.        ,  0.70593897, ..., -0.09824974,\n","         1.10239513, -1.16815381],\n","       ...,\n","       [-0.09816704,  0.        , -1.41655304, ..., -0.09824974,\n","        -0.5437633 , -1.16815381],\n","       [-0.09816704,  0.        ,  0.70593897, ..., -0.09824974,\n","         1.06416178, -1.16815381],\n","       [-0.09816704,  0.        ,  0.70593897, ..., -0.09824974,\n","        -0.42693916,  0.85605165]])"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"id":"CUqC1C973ZAC","executionInfo":{"elapsed":306745,"status":"ok","timestamp":1604593686621,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"64ac2e0a-c53f-4b85-8700-fc65bc1e7156","colab":{"base_uri":"https://localhost:8080/"}},"source":["# instanciar modelo de regressão logística\n","reg_log = LogisticRegression(max_iter=1000, solver='lbfgs', multi_class='auto')\n","\n","# treinar modelo\n","reg_log.fit(X_train_std, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"markdown","metadata":{"id":"FuIpucPQNv-M"},"source":["###Score"]},{"cell_type":"code","metadata":{"id":"r_-avv9k_hJP","executionInfo":{"elapsed":306716,"status":"ok","timestamp":1604593686642,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"74f986e2-e665-4147-c9a1-8273252db9db","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Score com os dados nornalizados\n","\n","reg_log.score(X_test_std, y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6784140969162996"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"markdown","metadata":{"id":"x7Ch3ySKOIEK"},"source":["### F1 Score"]},{"cell_type":"code","metadata":{"id":"jXRuOFQtOOCQ","executionInfo":{"elapsed":306702,"status":"ok","timestamp":1604593686682,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"fe986836-4b2e-4765-c000-a91e305777a5","colab":{"base_uri":"https://localhost:8080/"}},"source":["#F1 Score com os dados normalizados\n","\n","f1_score(y_test, reg_log.predict(X_test_std), average='weighted')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6781643844917981"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"markdown","metadata":{"id":"piAnCDoCOgUF"},"source":["##Seleção de Features\n"]},{"cell_type":"markdown","metadata":{"id":"iyELE4hviWPw"},"source":["##### Seleção de features com X_test"]},{"cell_type":"code","metadata":{"id":"VY3eOsGTOkjC","executionInfo":{"elapsed":308873,"status":"ok","timestamp":1604593688974,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"22fa90bc-f5d2-4293-dbc0-e17809ceefdb","colab":{"base_uri":"https://localhost:8080/","height":420}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from yellowbrick.features.importances import (FeatureImportances)\n","\n","fig, ax = plt.subplots(figsize=(6,4))\n","fi_viz = FeatureImportances(reg_log)\n","fi_viz.fit(X_test, y_test)\n","fi_viz.poof()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.metrics.classification module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.metrics. Anything that cannot be imported from sklearn.metrics is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/base.py:197: FutureWarning: From version 0.24, get_params will raise an AttributeError if a parameter cannot be retrieved as an instance attribute. Previously it would return None.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"5407NPq2ipYJ"},"source":["##### Seleção de features com X_test_std"]},{"cell_type":"code","metadata":{"id":"evwDcnJzus36"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Gq0VhWL0iyb_","executionInfo":{"elapsed":308777,"status":"ok","timestamp":1604593688985,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"0bc4c161-aa83-4b66-837b-bca14ecfd146","colab":{"base_uri":"https://localhost:8080/","height":384}},"source":["fig, ax = plt.subplots(figsize=(6,4))\n","fi_viz = FeatureImportances(reg_log)\n","fi_viz.fit(X_test_std, y_test)\n","fi_viz.poof()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/base.py:197: FutureWarning: From version 0.24, get_params will raise an AttributeError if a parameter cannot be retrieved as an instance attribute. Previously it would return None.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"NGnyvZ22uwiz","executionInfo":{"elapsed":308708,"status":"ok","timestamp":1604593688991,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"5691adc7-b2f7-45d2-f25c-5ecb37d5e6ca","colab":{"base_uri":"https://localhost:8080/"}},"source":["X_train.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Reg_Especial', 'Especial (Art. 213, § 6º, RICD)',\n","       'Reg_Ordinária (Art. 151, III, RICD)',\n","       'Reg_Prioridade (Art. 151, II, RICD)', 'Urgência (Art. 154, RICD)',\n","       'Urgência (Art. 155, RICD)', 'qtd_temas', 'qtd_autores',\n","       'Tramitacao(dias)', 'forca_politica'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":91}]},{"cell_type":"code","metadata":{"id":"oNo5mU27vBDC","executionInfo":{"elapsed":308637,"status":"ok","timestamp":1604593688999,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"2f9fbe5a-8d20-40f7-ef21-cba936844d39","colab":{"base_uri":"https://localhost:8080/","height":411}},"source":["X_features = X.iloc[:, [1, 4, 5]]\n","X_features"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Especial (Art. 213, § 6º, RICD)</th>\n","      <th>Urgência (Art. 154, RICD)</th>\n","      <th>Urgência (Art. 155, RICD)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5620</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1179</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11700</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19301</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10753</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2508</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15235</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1816 rows × 3 columns</p>\n","</div>"],"text/plain":["       Especial (Art. 213, § 6º, RICD)  ...  Urgência (Art. 155, RICD)\n","5620                                 0  ...                          0\n","1179                                 0  ...                          0\n","11700                                0  ...                          0\n","7130                                 0  ...                          0\n","19301                                0  ...                          0\n","...                                ...  ...                        ...\n","2773                                 0  ...                          1\n","10753                                0  ...                          0\n","2508                                 0  ...                          0\n","15235                                0  ...                          0\n","1075                                 0  ...                          0\n","\n","[1816 rows x 3 columns]"]},"metadata":{"tags":[]},"execution_count":92}]},{"cell_type":"code","metadata":{"id":"8cublY7jxQYM","executionInfo":{"elapsed":308479,"status":"ok","timestamp":1604593689008,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"33ea6634-d393-4c26-a28b-4ef1f289df87","colab":{"base_uri":"https://localhost:8080/","height":411}},"source":["y_features = y\n","y_features"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Arquivamento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5620</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1179</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11700</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7130</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>19301</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>10753</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2508</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>15235</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1075</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1816 rows × 1 columns</p>\n","</div>"],"text/plain":["       Arquivamento\n","5620              0\n","1179              0\n","11700             0\n","7130              0\n","19301             0\n","...             ...\n","2773              1\n","10753             1\n","2508              1\n","15235             1\n","1075              1\n","\n","[1816 rows x 1 columns]"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"code","metadata":{"id":"CjskIu11wE2N"},"source":["X_features_train, X_features_test, y_features_train, y_features_test = train_test_split(X_features, y_features, test_size=0.2, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nh-54ij8y4u-","executionInfo":{"elapsed":308395,"status":"ok","timestamp":1604593689019,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"d3766aee-f04b-40ec-d019-6ad064689fd4","colab":{"base_uri":"https://localhost:8080/"}},"source":["X_features_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1452, 3)"]},"metadata":{"tags":[]},"execution_count":95}]},{"cell_type":"code","metadata":{"id":"a1dx1-_Ly9i_","executionInfo":{"elapsed":308351,"status":"ok","timestamp":1604593689022,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"0e0af79b-6d08-4f8a-a6a9-8966ec4768f4","colab":{"base_uri":"https://localhost:8080/"}},"source":["y_features_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1452, 1)"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"code","metadata":{"id":"dVM1ATBQwlLp","executionInfo":{"elapsed":308307,"status":"ok","timestamp":1604593689027,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"c39449c3-9dd9-425e-c7af-7fc6d8692432","colab":{"base_uri":"https://localhost:8080/"}},"source":["reg_log.fit(X_features_train,y_features_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n","                   multi_class='auto', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":97}]},{"cell_type":"code","metadata":{"id":"qC8E2ZdZxGkn","executionInfo":{"elapsed":308263,"status":"ok","timestamp":1604593689030,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"8a18c2dc-4f07-4555-da39-c7d5ff34dd70","colab":{"base_uri":"https://localhost:8080/"}},"source":["reg_log.score(X_features_test, y_features_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5851648351648352"]},"metadata":{"tags":[]},"execution_count":98}]},{"cell_type":"markdown","metadata":{"id":"VjIQkh4-PAw0"},"source":["##Cross Validation"]},{"cell_type":"code","metadata":{"id":"o1zlWZvOPFC7","executionInfo":{"elapsed":308212,"status":"ok","timestamp":1604593689042,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"74f10401-c6fb-434c-eda8-87042437d5ba","colab":{"base_uri":"https://localhost:8080/"}},"source":["from sklearn.model_selection import cross_val_score\n","\n","cross_val_score(reg_log, X_test_std, np.ravel(y_test), cv=8, scoring='accuracy').mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6677239974937343"]},"metadata":{"tags":[]},"execution_count":99}]},{"cell_type":"markdown","metadata":{"id":"zEIvG7BmPLa_"},"source":["## Pipeline"]},{"cell_type":"code","metadata":{"id":"YSLG63SHPPjz","executionInfo":{"elapsed":308147,"status":"ok","timestamp":1604593689047,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"df72a8a3-61df-4551-9c5f-e45c992953bc","colab":{"base_uri":"https://localhost:8080/"}},"source":["from sklearn.pipeline import make_pipeline\n","\n","cross_val_score(reg_log, X_test_std, y_test, cv=10, scoring='accuracy').mean()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["0.6568599033816425"]},"metadata":{"tags":[]},"execution_count":100}]},{"cell_type":"markdown","metadata":{"id":"nhlMo-io21PR"},"source":["### Aplicação do modelo KNN"]},{"cell_type":"code","metadata":{"id":"sg4Drq4g25Wa"},"source":["from sklearn.neighbors import KNeighborsClassifier"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uoGjQ-Pu28vl"},"source":["knn = KNeighborsClassifier(n_neighbors=10)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i4-Qf01j4RYA","executionInfo":{"elapsed":308050,"status":"ok","timestamp":1604593689062,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"2547e371-af07-4cd7-ac9c-c89825500712","colab":{"base_uri":"https://localhost:8080/"}},"source":["knn.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  \"\"\"Entry point for launching an IPython kernel.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n","                     metric_params=None, n_jobs=None, n_neighbors=10, p=2,\n","                     weights='uniform')"]},"metadata":{"tags":[]},"execution_count":103}]},{"cell_type":"code","metadata":{"id":"RzDyVzir4jfV","executionInfo":{"elapsed":307987,"status":"ok","timestamp":1604593689066,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"932f85cc-9bfe-45ef-e022-6e99170128e5","colab":{"base_uri":"https://localhost:8080/"}},"source":["X_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1362, 10)"]},"metadata":{"tags":[]},"execution_count":104}]},{"cell_type":"code","metadata":{"id":"t4w4xVX_4nDa","executionInfo":{"elapsed":307943,"status":"ok","timestamp":1604593689070,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"2e0809b0-28cc-4e45-8810-34ab2d5c720f","colab":{"base_uri":"https://localhost:8080/"}},"source":["y_train.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1362, 1)"]},"metadata":{"tags":[]},"execution_count":105}]},{"cell_type":"code","metadata":{"id":"XlVxxg3n5Q7Q","executionInfo":{"elapsed":307898,"status":"ok","timestamp":1604593689073,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"8cdd7219-1cc4-45af-d2f9-f51519d2ec25","colab":{"base_uri":"https://localhost:8080/"}},"source":["knn.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6607929515418502"]},"metadata":{"tags":[]},"execution_count":106}]},{"cell_type":"markdown","metadata":{"id":"Dqc-XaEE6yQ3"},"source":["## KNN com variáveis normalizadas"]},{"cell_type":"code","metadata":{"id":"XSSZoR9c61_0"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VnR1aNp77URi"},"source":["knn = KNeighborsClassifier(n_neighbors=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2fwXfDMK7U1b","executionInfo":{"elapsed":307833,"status":"ok","timestamp":1604593689085,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"f4f075ea-0766-4914-f1f8-8acac4490e53","colab":{"base_uri":"https://localhost:8080/"}},"source":["knn.fit(X_train_std, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  \"\"\"Entry point for launching an IPython kernel.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n","                     metric_params=None, n_jobs=None, n_neighbors=10, p=2,\n","                     weights='uniform')"]},"metadata":{"tags":[]},"execution_count":108}]},{"cell_type":"code","metadata":{"id":"yIjoSil47VK1","executionInfo":{"elapsed":307787,"status":"ok","timestamp":1604593689088,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"46095beb-0429-4f6a-eb44-977c6082e654","colab":{"base_uri":"https://localhost:8080/"}},"source":["knn.score(X_test_std, y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6585903083700441"]},"metadata":{"tags":[]},"execution_count":109}]},{"cell_type":"markdown","metadata":{"id":"5iefHlzW9D3O"},"source":["#### KNN com Cross Validation"]},{"cell_type":"code","metadata":{"id":"tMhl5LoK8CB_","executionInfo":{"elapsed":307741,"status":"ok","timestamp":1604593689091,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"ff265cca-b450-49d4-cc4a-0776633146f0","colab":{"base_uri":"https://localhost:8080/"}},"source":["cross_val_score(knn, X_test_std, np.ravel(y_test), cv=8, scoring='accuracy').mean()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6631813909774436"]},"metadata":{"tags":[]},"execution_count":110}]},{"cell_type":"code","metadata":{"id":"C8fdzmFl8Z-s"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dzu9nQ45-OXn"},"source":["## Aplicando o modelo Árvore de Decisão"]},{"cell_type":"code","metadata":{"id":"JPax_uvt-SJD"},"source":["from sklearn.tree import DecisionTreeClassifier, plot_tree"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1ot1IGLQ-TGW"},"source":["clf = DecisionTreeClassifier().fit(X, y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CwfcFTqO7Cnq","executionInfo":{"elapsed":307625,"status":"ok","timestamp":1604593689106,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"3063a29d-051e-435c-ee93-aeeab257c4d0","colab":{"base_uri":"https://localhost:8080/","height":447}},"source":["clf = DecisionTreeClassifier(max_depth=4).fit(X, y)\n","plt.figure(figsize=(30,10))\n","plot_tree(clf, filled=True, fontsize=12, feature_names=X.columns)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x720 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ZOEoijSz7GR5"},"source":["clf2 = DecisionTreeClassifier(max_depth=4).fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"loUTpD9G7IhK","executionInfo":{"elapsed":307496,"status":"ok","timestamp":1604593689121,"user":{"displayName":"Lourdes Costa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgL8_RSnHBjDY4SazbtyQvHxsHX_WWe3GL5mzGO1A=s64","userId":"15382137903649759394"},"user_tz":180},"outputId":"63b0d08d-f03d-4b2a-97cf-50e1a3802a1c","colab":{"base_uri":"https://localhost:8080/"}},"source":["clf2.score(X_test, y_test)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7048458149779736"]},"metadata":{"tags":[]},"execution_count":115}]}]}